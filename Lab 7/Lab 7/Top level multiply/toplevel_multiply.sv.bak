module toplevel(
    input logic [7:0] SW,           // 8 switches for A and B inputs
    output logic [6:0] segA,        // 7-segment output for A
    output logic [6:0] segB,        // 7-segment output for B
    output logic [6:0] segP1,       // 7-segment output for lower digit of P
    output logic [6:0] segP2        // 7-segment output for upper digit of P
);

    // Declare internal signals
    logic [3:0] A;                  // 4-bit multiplicand
    logic [3:0] B;                  // 4-bit multiplier
    logic [7:0] P;                  // 8-bit product output from mult4

    // Connect switches to A and B
    assign A = SW[7:4];             // Assign SW[7:4] to A
    assign B = SW[3:0];             // Assign SW[3:0] to B

    // Instantiate the 4-bit multiplier
    mult4 multiplier (
        .A(A),
        .B(B),
        .P(P)
    );

    // Instantiate hex decoder for A
    decimal7decoder decoderA (
        .b_in(A),
        .sign_out(),       // Not using sign output for unsigned values
        .digit_out(segA)   // Connect to 7-segment display for A
    );

    // Instantiate hex decoder for B
    decimal7decoder decoderB (
        .b_in(B),
        .sign_out(),       // Not using sign output for unsigned values
        .digit_out(segB)   // Connect to 7-segment display for B
    );

    // Instantiate hex decoder for lower 4 bits of P (P[3:0])
    decimal7decoder decoderP1 (
        .b_in(P[3:0]),
        .sign_out(),       // Not using sign output for unsigned values
        .digit_out(segP1)  // Connect to 7-segment display for lower P
    );

    // Instantiate hex decoder for upper 4 bits of P (P[7:4])
    decimal7decoder decoderP2 (
        .b_in(P[7:4]),
        .sign_out(),       // Not using sign output for unsigned values
        .digit_out(segP2)  // Connect to 7-segment display for upper P
    );

endmodule
